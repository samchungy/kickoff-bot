service: kickoff

frameworkVersion: '2'

plugins:
  - serverless-esbuild
  - serverless-dynamodb-local
  - serverless-offline

variablesResolutionMode: 20210326

package:
  individually: true

custom:
  prefix: ${self:service}-${sls:stage}
  esbuild:
    bundle: true
    minify: false
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      dbPath: .dynamodb
      migrate: true


provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: ap-southeast-2
  environment:
    LOG_LEVEL: ${env:LOG_LEVEL, 'info'}
    NODE_ENV: ${env:NODE_ENV, 'production'}
    SLACK_TOKEN: ${env:SLACK_TOKEN}
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_DOMAIN: ${env:SLACK_DOMAIN}
    NODE_TLS_REJECT_UNAUTHORIZED: ${env:NODE_TLS_REJECT_UNAUTHORIZED}
    PREFIX: ${self:custom.prefix}-
    LAMBDA_ENDPOINT: ${env:LAMBDA_ENDPOINT}
    DYNAMODB_ENDPOINT: ${env:DYNAMODB_ENDPOINT}
    KICKOFF_TABLE: ${self:custom.prefix}

functions:
  # Slack
  slack-actions:
    handler: src/functions/slack-actions/handler.handler 
    events:
      - http:
          method: POST
          path: /slack-actions
  slack-events:
    handler: src/functions/slack-events/handler.handler
    events:
      - http:
          method: POST
          path: /slack-events

  # Kickoff
  open-kickoff:
    handler: src/functions/open-kickoff/handler.handler
    events:
      - http:
          method: POST
          path: /kickoff
          async: true # This enables us to tell Slack we received the message without needing to respond via a lambda     
  post-kickoff:
    handler: src/functions/post-kickoff/handler.handler
  retry-kickoff:
    handler: src/functions/retry-kickoff/handler.handler

  # User reminders
  add-user-reminder:
    handler: src/functions/add-user-reminder/handler.handler

resources:
  Resources:
    KickoffTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        BillingMode: 'PAY_PER_REQUEST'
        AttributeDefinitions:
          - AttributeName: hashKey
            AttributeType: S
          - AttributeName: rangeKey
            AttributeType: S
        KeySchema:
          - AttributeName: hashKey
            KeyType: HASH
          - AttributeName: rangeKey
            KeyType: RANGE
        TableName: ${self:provider.environment.KICKOFF_TABLE}
        TimeToLiveSpecification:
            AttributeName: ttl
            Enabled: true